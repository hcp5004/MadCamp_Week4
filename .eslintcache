[{"/home/ubuntu/MadCamp_Week4/madcamp_week4/src/reportWebVitals.js":"1","/home/ubuntu/MadCamp_Week4/madcamp_week4/src/Co_buying/Co_buying.js":"2","/home/ubuntu/MadCamp_Week4/madcamp_week4/src/Free.js":"3","/home/ubuntu/MadCamp_Week4/madcamp_week4/src/FreeOne.js":"4","/home/ubuntu/MadCamp_Week4/madcamp_week4/src/Main.js":"5","/home/ubuntu/MadCamp_Week4/madcamp_week4/src/Join.js":"6","/home/ubuntu/MadCamp_Week4/madcamp_week4/src/Co_buying/EachBuying.js":"7","/home/ubuntu/MadCamp_Week4/madcamp_week4/src/index.js":"8","/home/ubuntu/MadCamp_Week4/madcamp_week4/src/App.js":"9","/home/ubuntu/MadCamp_Week4/madcamp_week4/src/Jilli.js":"10","/home/ubuntu/MadCamp_Week4/madcamp_week4/src/Sarang.js":"11","/home/ubuntu/MadCamp_Week4/madcamp_week4/src/FreeWrite.js":"12","/home/ubuntu/MadCamp_Week4/madcamp_week4/src/Login.js":"13","/home/ubuntu/MadCamp_Week4/madcamp_week4/src/JilliBoard.js":"14"},{"size":362,"mtime":1611294382357,"results":"15","hashOfConfig":"16"},{"size":5012,"mtime":1611728040003,"results":"17","hashOfConfig":"16"},{"size":3933,"mtime":1611671311117,"results":"18","hashOfConfig":"16"},{"size":10131,"mtime":1611671311117,"results":"19","hashOfConfig":"16"},{"size":3529,"mtime":1611671311121,"results":"20","hashOfConfig":"16"},{"size":2906,"mtime":1611671311121,"results":"21","hashOfConfig":"16"},{"size":2137,"mtime":1611727633730,"results":"22","hashOfConfig":"16"},{"size":602,"mtime":1611671311121,"results":"23","hashOfConfig":"16"},{"size":1841,"mtime":1611753450214,"results":"24","hashOfConfig":"16"},{"size":9256,"mtime":1611767017037,"results":"25","hashOfConfig":"16"},{"size":244,"mtime":1611670536191,"results":"26","hashOfConfig":"16"},{"size":4170,"mtime":1611671311121,"results":"27","hashOfConfig":"16"},{"size":2586,"mtime":1611671311121,"results":"28","hashOfConfig":"16"},{"size":7901,"mtime":1611764714034,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"tbzn2l",{"filePath":"33","messages":"34","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"32"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"32"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/ubuntu/MadCamp_Week4/madcamp_week4/src/reportWebVitals.js",[],["68","69"],"/home/ubuntu/MadCamp_Week4/madcamp_week4/src/Co_buying/Co_buying.js",["70","71","72","73","74","75","76","77"],"import React, {useState, useEffect} from 'react';\nimport './Co_buying.css';\nimport { Link, Route, BrowserRouter as Router} from 'react-router-dom';\nimport Axios from 'axios';\n\nfunction Co_buying(params) {\n    const [buyContent, setBuyContent] = useState({\n        id: '',\n        name: '',\n        member: '',\n        info: ''\n    })\n\n    const [viewContent, setViewContent] = useState([])\n\n    const [showWrite, setShowWrite] = useState(0)\n\n    useEffect(() => {\n        Axios.get('http://192.249.18.168:8080/api/Jilli').then((response)=>{\n            // console.log(response.data._id)\n            setViewContent(response.data);\n        })\n    }, [viewContent])\n\n    const getName = e => {\n        const {_, value} = e.target;\n        setBuyContent({\n            ...buyContent,\n            name: value\n        })\n        console.log(buyContent);\n    }\n\n    const getMember = e => {\n        const {_, value} = e.target;\n        setBuyContent({\n            ...buyContent,\n            member: value\n        })\n        console.log(buyContent);\n    }\n\n    const getInfo = e => {\n        const {_, value} = e.target;\n        setBuyContent({\n            ...buyContent,\n            info: value\n        })\n        console.log(buyContent);\n    }\n\n    return(\n        <div className='body'>\n            <div className='Co_buying_wrap'>\n                <h1>Co-Buying</h1>\n            </div>\n            <div className='writeButton' onClick={() => setShowWrite(1)}>새 글 작성하기</div>\n\n            {showWrite === 0 ? null : \n                <div className='showWrite'>\n                    \n                    {/* <div className='form-wrapper'> */}\n                        <input className=\"small-input\" type='text' placeholder='제목' onChange={getName} />\n                        <input className=\"small-input_\" type='text' placeholder='인원' onChange={getMember} />\n                        \n                        <textarea className='big-input' type='text' placeholder='내용' onChange={getInfo} />\n                    {/* </div> */}\n                    \n                    <button className='close-button' onClick={() => setShowWrite(0)}>닫기</button>\n                    <button className=\"submit-button\" onClick={()=>{\n\n                        if (buyContent.name == '') {alert('제목을 입력하시오'); return }\n                        if (buyContent.member == '') {alert('인원을 입력하시오'); return }\n                        if (buyContent.info == '') {alert('내용을 입력하시오'); return }\n                        Axios.post('http://192.249.18.168:8080/api/cobuying', {\n                            dorm: 'Jilli',\n                            name: buyContent.name,\n                            member: buyContent.member,\n                            info: buyContent.info,\n                            reply: []\n                        }).then( function(response){\n                            buyContent.id = response.data._id\n                            console.log(buyContent.id)\n                            setViewContent(viewContent.concat({...buyContent}))\n                            setShowWrite(0)\n                            setBuyContent({id: '',\n                            name: '',\n                            member: '',\n                            info: ''})\n                        });\n                    }}>등록\n                    </button>\n                </div>\n            }\n\n\n            <div className='contents-container'>\n                {viewContent.map(element => \n                    <Link to ={'/Co_buying/'+element._id} style={{display: 'block'}}>\n                        <article>\n                            <div className='each-content'>\n                                <h3>{element.name}, {element.member}</h3>\n                                <p>{element.info}</p>\n                            </div>\n                        </article>\n                    </Link>)}\n                \n            </div>\n            {/* <div className='form-wrapper'>\n                <input className=\"small-input\" type='text' placeholder='제목' onChange={getName} />\n                <input className=\"small-input\" type='text' placeholder='인원' onChange={getMember} />\n                <textarea className=\"content\" type='text' placeholder='내용' onChange={getInfo} />\n            </div>\n            <button className=\"submit-button\" onClick={()=>{\n                \n                Axios.post('http://192.249.18.168:8080/api/cobuying', {\n                    dorm: 'Jilli',\n                    name: buyContent.name,\n                    member: buyContent.member,\n                    info: buyContent.info,\n                    reply: []\n                }).then( function(response){\n                    buyContent.id = response.data._id\n                    console.log(buyContent.id)\n                    setViewContent(viewContent.concat({...buyContent}));\n                });\n            }}>입력</button> */}\n        </div>\n    );\n}\n\nexport default Co_buying;","/home/ubuntu/MadCamp_Week4/madcamp_week4/src/Free.js",["78","79","80","81","82","83","84","85"],"import React from 'react';\nimport {Component} from 'react';\nimport {useState, useEffect} from 'react';\nimport './style/Free.css'\nimport Axios from 'axios';\nimport Alert from '@material-ui/lab/Alert'\nimport { AlertTitle } from '@material-ui/lab';\nimport { NavLink ,Link, Route, BrowserRouter as Router} from 'react-router-dom';\nimport Button from '@material-ui/core/Button'\nimport Icon from '@material-ui/icons/BorderColor';\n\nfunction Free(){\n\n    const [Content, setContent] = useState({\n        _id: '',\n        userid: '',\n        title: '',\n        content: '',\n        anonymous: false\n    })\n\n    const submitContent = () => {\n        Axios.post('http://localhost:3002/api/freeboard',{\n            title: Content.title,\n            content: Content.content\n        }).then(() => \n        alert('POST COMPLETE') //material ui로 바꿀 수 있음... collapse를 사용??\n        )\n    }\n\n    // const getContent = () =>{\n    //     Axios.get('http://localhost:3002/api/freeboard').then((response)=>{\n    //         setViewContent(response.data);\n    //     })\n    // }\n\n    \n\n    const [viewContent, setViewContent] = useState([]);\n\n    const getValue = e => {\n        const {name, value} = e.target;\n        setContent({\n            ...Content, ////javascript ... 문법 이해 필요\n            [name]: value\n        })\n    };\n\n    const getContentValue = (e) => {\n        const data = e.target.value;\n        setContent({\n            ...Content,\n            content: data\n        })\n        console.log(Content);\n    }\n\n    useEffect(() => {\n        Axios.get('http://localhost:3002/api/freeboard').then((response)=>{\n            setViewContent(response.data.reverse());\n        })\n    },[viewContent]) // useEffect 인자로 state 보내주면 state 바뀔때마다 useEffect 실행....\n    \n    // const getData = ()=>{\n    //     fetch('http://localhost:3002/api')\n    //         .then((res) => res.json())\n    //         .then((res) => (res.greeting));\n    // };\n\n    // var apiResponse = {greeting: getData()}\n    \n    return(\n        <div className = \"Freetotal-container\">\n        <div className = \"Freetitle-wrap\">\n            <h1>자유 게시판</h1>\n        </div>\n        <div className=\"Freeboard-container\">\n            <div className = \"Freearticles\">\n                <div>\n                    <Link to='/Jilli/freeboardwrite'>\n                        <Button \n                            className=\"submit-button\"\n                            variant=\"outlined\"\n                            color=\"primary\"\n                            startIcon={<Icon />}\n            \n                            // onClick = {() => {\n                            //     setViewContent(viewContent.concat({...Content}));\n                            // }}\n                            // onClick = {submitContent}\n                            >글쓰기</Button>\n                    </Link>\n                </div>\n            {viewContent.map(element => \n                <NavLink to = {'/Jilli/freeboardwrite/' + element._id}>\n                    <article>\n                        <div className = \"article\">\n                            <h2 className = \"medium\">{element.title}</h2>\n                            <p className = \"small\">\n                                {element.content}\n                            </p>\n                            <h3 className =\"small\">{element.anonymous ? (\"익명\"):(element.userid)}</h3>\n                            <hr></hr>\n                        </div>\n                    </article>\n                </NavLink>\n            )}\n            </div>\n        </div>\n        {/* <div className='form-wrapper'>\n            <input className=\"title-input\" type='text' placeholder='제목' onChange = {getValue} name = 'title' />\n            <textarea className=\"text-area\" placeholder='내용' onChange = {getContentValue}></textarea>\n        </div> */}\n        </div>\n    );\n\n}\n\n\nexport default Free;","/home/ubuntu/MadCamp_Week4/madcamp_week4/src/FreeOne.js",["86","87","88","89","90","91","92","93","94","95"],"import React from 'react';\nimport {Component} from 'react';\nimport {useState, useEffect} from 'react';\nimport Axios from 'axios';\nimport Alert from '@material-ui/lab/Alert'\nimport { AlertTitle } from '@material-ui/lab';\nimport { Link, Route, BrowserRouter as Router, useParams} from 'react-router-dom';\nimport './style/FreeOne.css'\nimport { Checkbox } from '@material-ui/core';\n\nimport Create from '@material-ui/icons/Create';\nimport IconButton from '@material-ui/core/IconButton';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\nfunction FreeOne(){\n\n    var params = useParams();\n    const id = params.freeid;\n\n    const[ Delete, setDelete] = useState(false)\n\n    const[ User , setUser] = useState('')\n\n    // var board = {\n    //     title : '',\n    //     content : ''\n    // }\n\n\n    const [Content, setContent] = useState({\n        title: '',\n        content: '',\n        userid: '',\n        anonymous: false\n    })\n\n    const[Comment, setComment] = useState({\n        commentcontent: '',\n        anonymous: true,\n        userid: ''\n    })\n\n    useEffect( async ()=>{\n        try{\n            await Axios.get('http://localhost:3002/api/users/check',{withCredentials: true}).then(\n                (response) => {\n                    setUser(response.data.user_id);\n                    console.log(response.data.user_id);\n                }\n        )} catch(err){\n            console.log(err.response.data)\n        }\n    },[]) // ID 불러옴\n\n\n    const submitComment = async (e) => {\n        e.preventDefault()\n        if(Comment.commentcontent == \"\"){\n            alert('내용을 입력하세요')\n        } else {\n            try{\n                await Axios.put('http://localhost:3002/api/freeboard/'+ id,{\n                    commentcontent: Comment.commentcontent,\n                    anonymous: checked\n                },{withCredentials: true}).then(() => \n                {alert('POST COMPLETE'); //material ui로 바꿀 수 있음... collapse를 사용??\n                setComment({...Comment, commentcontent: ''})\n                })\n                console.log(Comment.commentcontent);\n            }catch(err){\n                console.log(err.response.data)\n                alert('로그인 필요')\n            }\n        }\n    }\n\n    // const getContent = () =>{\n    //     Axios.get('http://localhost:3002/api/freeboard').then((response)=>{\n    //         setViewContent(response.data);\n    //     })\n    // }\n\n    \n\n    const [viewComment, setviewComment] = useState([]);\n\n    const getValue = e => {\n        const commentcontent = e.target.value;\n        setComment({\n            commentcontent: commentcontent\n        })\n        console.log(Comment);\n    };\n\n    // const getContentValue = (e) => {\n    //     const data = e.target.value;\n    //     setContent({\n    //         ...Content,\n    //         content: data\n    //     })\n    //     console.log(Content);\n    // }\n\n    useEffect( async () => {\n        try{\n            await Axios.get('http://localhost:3002/api/freeboard/'+ id).then((response)=>{\n                setContent({\n                    title: response.data.title,\n                    content: response.data.content,\n                    userid: response.data.userid,\n                    anonymous: response.data.anonymous\n                });\n                setviewComment(response.data.comment);\n                // console.log(\"반복\")\n                // console.log(response.data.comment)\n        })} catch(err){\n            setDelete(true)\n        }\n    },[viewComment]); // useEffect 인자로 state 보내주면 state 바뀔때마다 useEffect 실행....\n\n    \n    // // const getData = ()=>{\n    // //     fetch('http://localhost:3002/api')\n    // //         .then((res) => res.json())\n    // //         .then((res) => (res.greeting));\n    // // };\n\n    // // var apiResponse = {greeting: getData()}\n\n    const [checked, setChecked] = useState(true);\n\n    const handleChange = (e) => {\n        setChecked(e.target.checked)\n    }\n\n    const makeDelete = async (commentid) => {\n        console.log(\"여기도 반복?\")\n        console.log(commentid)\n        try{\n            await Axios.delete('http://localhost:3002/api/freeboard/'+ id,{ data: {commentid : commentid} , withCredentials: true}).then( (res) => {\n                console.log(\"느려지나?\");\n                setviewComment(res.data.comment);\n            })\n        }\n        catch(err){\n            console.log(err.response.data);\n            // setviewComment(...viewComment);\n        }\n    }\n\n    const BoardDelete = async() => { \n        try{\n            await Axios.delete('http://localhost:3002/api/freeboard/delete/'+ id, {withCredentials: true}).then(\n                (res) =>{\n                    document.location.href = \"/Jilli\"\n                })\n        } catch(err){\n\n        }\n    }\n\n\n\n    return(\n        // <div className=\"Free\">\n        // <h1>Free Board</h1>\n        // <div className='movie-container'>\n        //     {viewContent.map(element => \n        //         <div>\n        //             <Link to = '/Jilli/freeboard/:freeid'>\n        //                 <button>\n        //                     <h2>{element.title}</h2>\n        //                     <div>\n        //                         {element.content}\n        //                     </div>\n        //                 </button>\n        //             </Link>\n        //         </div>\n        //     )}\n        // </div>\n        // {/* <div className='form-wrapper'>\n        //     <input className=\"title-input\" type='text' placeholder='제목' onChange = {getValue} name = 'title' />\n        //     <textarea className=\"text-area\" placeholder='내용' onChange = {getContentValue}></textarea>\n        // </div> */}\n        // <Link to='/Jilli/freeboardwrite'>\n        //     <button \n        //     className=\"submit-button\"\n        \n        //     // onClick = {() => {\n        //     //     setViewContent(viewContent.concat({...Content}));\n        //     // }}\n        //     // onClick = {submitContent}\n        //     >글쓰기</button>\n        // </Link>\n        // </div>\n        <div className = \"FreeOnearticle-container\">\n            <div className = \"FreeOnetitle-wrap\">\n                <h1>자유게시판</h1>\n            </div>\n            <div className = \"FreeOnearticles-wrap\">\n                {Delete && (\n                    <article className = \"dialog\">\n                        글이 존재하지 않습니다. \n                    </article>\n                )}\n                \n                {! Delete && \n                    (<article>\n                        <div className = \"article\">\n                            <div className = \"profile\">\n                                <h3 className = \"large\">{Content.anonymous ? (\"익명\"):(Content.userid)}</h3>\n                            </div>\n                            <div className = \"status\">\n                            {( User ===  Content.userid ) && (<div className = \"update\">수정</div>)}\n                            {( User === Content.userid ) && (<div className = \"delete\" onClick = {() => BoardDelete()} >삭제</div>)}\n                            </div>\n                            <hr></hr>\n                            <h2 className=\"large\">{Content.title}</h2>\n                            <p className=\"large\">{Content.content}</p>\n                            <hr></hr>\n                            <div className = \"comment\">\n                                {viewComment.map(element =>\n                                <article >\n                                    <div className = \"parent\">\n                                        <h3 className = \"medium\">{element.anonymous ? (\"익명\"):(element.userid)}</h3>\n                                        <div className = \"status\">\n                                            {( User === element.userid ) && (<div className = \"delete\" onClick = {() => makeDelete(element._id)} >삭제</div>)}\n                                        </div>\n                                        <hr></hr>\n                                        <p className = \"large\">{element.commentcontent}</p> \n                                        <hr></hr> \n                                    </div>\n                                </article>)}\n                                <form className = \"writecomment \" onSubmit = {submitComment}>\n                                    <input\n                                        value = {Comment.commentcontent}\n                                        type=\"text\"\n                                        className=\"text\"\n                                        placeholder=\"댓글을 입력하세요.\"\n                                        onChange = {getValue}\n                                    />\n                                    <div className = \"option\">\n                                        <FormControlLabel\n                                            className = \"anonym\"\n                                            label = \"익명\"\n                                            control = {<Checkbox\n                                                color=\"primary\"\n                                                checked = {checked}\n                                                onChange = {handleChange}    \n                                            />}\n                                            labelPlacement = \"start\"\n                                        >\n                                        </FormControlLabel>\n                                        <IconButton \n                                            type = \"submit\"\n                                            variant=\"outlined\"\n                                            color=\"primary\"\n                                        ><Create style ={{marginTop: \"-3px\"}}></Create></IconButton>\n                                    </div>\n                                </form>\n                            </div>  \n                        </div>\n                    </article>)\n                }\n            </div>    \n        </div> \n    );\n\n}\n\nexport default FreeOne;","/home/ubuntu/MadCamp_Week4/madcamp_week4/src/Main.js",["96","97","98"],"import React from 'react';\nimport './style/btnStyle.css';\nimport { Link, Route, BrowserRouter as Router} from 'react-router-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport Button from '@material-ui/core/Button'\nimport Icon from '@material-ui/icons/Person';\nimport {useEffect} from 'react';\n\nfunction Main(props){\n    useEffect(() => {\n        if (props.cookies.user && props.cookies.user !== 'undefined') {\n        props.setHasCookie(true);\n        }\n      }, [ props.cookies ]);\n\n    return(\n        <>\n        <nav style = {{height: \"80px\"}}>\n            <div class = \"account-wrap\">\n                {!props.hasCookie && (\n                <div class = \"account\">\n                    <Link to = '/Login'>\n                        <Button\n                            variant=\"outlined\"\n                            color=\"primary\"\n                            startIcon={<Icon />}    \n                        >로그인\n                        </Button>\n                    </Link>    \n                </div>\n                )}\n                {props.hasCookie && (\n                <div class = \"account\" >\n                        <Button \n                            onClick = {props.removeCookie}\n                            variant=\"outlined\"\n                            color=\"primary\"\n                            startIcon={<Icon />} \n                        >로그아웃</Button>  \n                </div>\n                )}\n            </div>\n        </nav>\n        <div className=\"btn\">\n            <ul style={{listStyleType: 'none'}}>\n                <table>\n                    <tr>\n                    <h1>KAIST Dormitory Community</h1>\n                    </tr><tr>\n                        <li style={{float: 'left'}}><Link to='/Co_buying'   style={{textDecoration: 'none' }} ><div>사랑</div></Link></li>\n                        <li style={{float: 'left'}}><Link to='/Somang'   style={{textDecoration: 'none' }} ><div>소망</div></Link></li>\n                        <li style={{float: 'left'}}><Link to='/Areum'    style={{textDecoration: 'none' }} ><div>아름</div></Link></li>\n                        <li style={{float: 'left'}}><Link to='/Seongsil' style={{textDecoration: 'none' }} ><div>성실</div></Link></li>\n                    </tr><tr>\n                        <li style={{float: 'left'}}><Link to='/Jilli'    style={{textDecoration: 'none' }} ><div>진리</div></Link></li>\n                        <li style={{float: 'left'}}><Link to='/Silloe'   style={{textDecoration: 'none' }} ><div>신뢰</div></Link></li>\n                        <li style={{float: 'left'}}><Link to='/Jihey'    style={{textDecoration: 'none' }} ><div>지혜</div></Link></li>\n                        <li style={{float: 'left'}}><Link to='/Sejong'   style={{textDecoration: 'none' }} ><div>세종</div></Link></li>\n                    </tr><tr>\n                        <li style={{float: 'left'}}><Link to='/Dasom'    style={{textDecoration: 'none' }} ><div>다솜</div></Link></li>\n                        <li style={{float: 'left'}}><Link to='/Heemang'  style={{textDecoration: 'none' }} ><div>희망</div></Link></li>\n                        <li style={{float: 'left'}}><Link to='/Mir'      style={{textDecoration: 'none' }} ><div>미르</div></Link></li>\n                        <li style={{float: 'left'}}><Link to='/Narae'    style={{textDecoration: 'none' }} ><div>나래</div></Link></li>\n                    </tr>\n                </table>\n            </ul>\n        </div>\n        </>\n    );\n}\n\n\nexport default Main;","/home/ubuntu/MadCamp_Week4/madcamp_week4/src/Join.js",["99","100","101"],"import React from 'react';\nimport { Link, Route, BrowserRouter as Router} from 'react-router-dom';\nimport {useState, useEffect} from 'react';\nimport Axios from 'axios';\nimport \"./style/Join.css\"\n\nfunction Join(){\n\n    const [ userId, setUserId ] = useState('');\n    const [ userPw, setUserPw ] = useState('');\n    const [ userName, setUserName ] = useState('');\n    const [ isJoinSuccess, setJoinSuccess ] = useState(false);\n\n    const createUserApi = (user) => {\n        return Axios.post('http://localhost:3002/api/users/new',\n            user).then((response) => response.data);\n    }\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        try {\n            const response = await createUserApi({\n                user_id: userId,\n                user_pw: userPw,\n                user_name: userName\n            });\n            if (response.result === 'ok') {\n                setJoinSuccess(true);\n            }\n            if (response.error){\n                alert(response.error);\n            }\n        } catch (err) {\n            console.error('login error', err);\n            console.log(err.message.data); //err 메세지 구분 피룡....\n            alert('회원가입에 실패하였습니다. 잠시 후 다시 시도해주세요.')\n        }\n    };\n    \n\n    return(\n        <div>\n            {!isJoinSuccess && (\n                <>\n                    <h2>Join</h2>\n                    <form\n                        onSubmit={handleSubmit}\n                    >\n                        <input\n                            type=\"text\"\n                            name=\"user_id\"\n                            value={userId}\n                            onChange={e => setUserId(e.target.value)}\n                            placeholder=\"아이디\"\n                        />\n                        <input\n                            type=\"password\"\n                            name=\"user_pw\"\n                            value={userPw}\n                            onChange={e => setUserPw(e.target.value)}\n                            placeholder=\"비밀번호\"\n                        />\n                        <input\n                            type=\"text\"\n                            name=\"user_name\"\n                            value={userName}\n                            onChange={e => setUserName(e.target.value)}\n                            placeholder=\"이름\"\n                        />\n                        <button\n                            type=\"submit\"\n                        >\n                        제출\n                        </button>\n                    </form>\n                </>\n            )}\n            {isJoinSuccess && (\n                <div>\n                    <p>회원가입을 축하합니다!</p>\n                    <Link to=\"/login\">로그인</Link>\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport default Join;","/home/ubuntu/MadCamp_Week4/madcamp_week4/src/Co_buying/EachBuying.js",["102","103","104"],"import React, {useEffect, useState} from 'react'\nimport {useParams} from 'react-router-dom'\nimport Axios from 'axios'\n\nfunction EachBuying() {\n\n    var body = useParams()\n    \n    const [replyContent, setReplyContent] = useState({\n        content:''\n    })\n\n    const [viewReplyContent, setViewReplyContent] = useState([])\n\n    const [viewContent, setViewContent] = useState([])\n\n    useEffect(() => {\n        Axios.get('http://192.249.18.168:8080/api/cobuying/'+body.id).then((response)=>{\n            setViewContent(response.data)\n        })\n    }, [viewContent])\n\n    useEffect(() => {\n        Axios.get('http://192.249.18.168:8080/api/cobuying/'+body.id).then((response)=>{\n            setViewReplyContent(response.data[0].reply)\n        })\n    }, [])\n\n    const writeReply = e => {\n        const {_, value} = e.target;\n        setReplyContent({\n            ...replyContent,\n            content: value\n        })\n    }\n\n    const postReply = () => {\n        setViewReplyContent(viewReplyContent.concat(replyContent.content))\n        console.log(replyContent.content)\n        Axios.get('http://192.249.18.168:8080/api/cobuying/'+body.id).then((response) => {\n            var list  = response.data[0].reply.concat(replyContent.content)\n            Axios.put('http://192.249.18.168:8080/api/cobuying/'+body.id, list).then((response)=>{\n                console.log(\"put okay\")\n            })\n        })\n        \n        setReplyContent({\n            ...replyContent,\n            content: ''\n        })\n    }\n\n    return(\n        <div>\n            {viewContent.map(element => \n            <div className='each-content'>\n                <h3>{element.name}, {element.member}</h3>\n                <p>{element.info}</p>\n            </div>\n            )}\n            \n            {viewReplyContent.map(element => \n                <div>{element}</div>)}\n\n            <div>\n                <input input className=\"title-input\" type='text' placeholder='댓글' value={replyContent.content} onChange = {writeReply}/>\n                <button onClick = {postReply}>등록</button>\n            </div>\n        </div>\n    )\n}\n\nexport default EachBuying","/home/ubuntu/MadCamp_Week4/madcamp_week4/src/index.js",[],"/home/ubuntu/MadCamp_Week4/madcamp_week4/src/App.js",["105","106"],"import Co_buying from './Co_buying/Co_buying'\nimport EachBuying from './Co_buying/EachBuying'\nimport Jilli from './Jilli'\nimport React from 'react';\nimport './style/App.css';\nimport Main from './Main';\nimport Sarang from './Sarang';\nimport Free from './Free';\nimport FreeWrite from './FreeWrite';\nimport FreeOne from './FreeOne';\nimport Login from './Login';\nimport Join from './Join';\nimport { withCookies, useCookies } from 'react-cookie';\nimport {useState, useEffect} from 'react';\nimport { Link, Route, BrowserRouter as Router , Redirect} from 'react-router-dom'\nimport JilliBoard from './JilliBoard';\n\nfunction App() {\n\n  const [ cookies, removeCookie ] = useCookies(['user']);\n  const [ hasCookie, setHasCookie ] = useState(false);\n\n  useEffect(() => {\n    if (cookies.user && cookies.user !== 'undefined') {\n    setHasCookie(true);\n    }\n  }, [ cookies ]);\n\n  return (\n    <Router>\n      <Route exact path='/Co_buying'><Co_buying/></Route>\n      <Route path='/Co_buying/:id'><EachBuying/></Route>\n      <Route exact path='/Somang'><Jilli/></Route>\n      <Route exact path = '/'><Main cookies = {cookies} hasCookie = {hasCookie} setHasCookie = {setHasCookie} removeCookie = {() => {removeCookie('user'); setHasCookie(false);}}/></Route>\n      <Route path='/Sarang'><Sarang/></Route>\n      <Route exact path = '/Jilli'><Free/></Route>\n      <Route exact path = '/Jilli/freeboardwrite'>{hasCookie?(<FreeWrite></FreeWrite>):(<Redirect to ={{pathname : \"/Login\"}}/>)}</Route>\n      <Route exact path = '/Jilli/freeboardwrite/:freeid'><FreeOne></FreeOne></Route>\n      <Route exact path = '/Login'><Login setHasCookie = {setHasCookie}></Login></Route>\n      <Route exact path = '/Join'><Join></Join></Route>\n      <Route exact path='/Jilli/board/:roomNum'><Jilli/><JilliBoard/></Route>\n    </Router>\n  )\n}\n\nexport default withCookies(App);\n","/home/ubuntu/MadCamp_Week4/madcamp_week4/src/Jilli.js",["107","108","109","110","111","112","113","114","115","116","117"],"/home/ubuntu/MadCamp_Week4/madcamp_week4/src/Sarang.js",[],"/home/ubuntu/MadCamp_Week4/madcamp_week4/src/FreeWrite.js",["118","119","120","121"],"import React from 'react';\nimport {Component} from 'react';\nimport {useState, useEffect} from 'react';\nimport './style/FreeWrite.css';\nimport Axios from 'axios';\nimport Alert from '@material-ui/lab/Alert'\nimport { AlertTitle } from '@material-ui/lab';\nimport { Checkbox } from '@material-ui/core';\nimport { Button } from '@material-ui/core';\nimport Create from '@material-ui/icons/Create';\nimport IconButton from '@material-ui/core/IconButton';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\nfunction FreeWrite(){\n\n    const [Content, setContent] = useState({\n        title: '',\n        content: ''\n    })\n\n    const submitContent = async () => {\n        await Axios.post('http://localhost:3002/api/freeboard',{\n            title: Content.title,\n            content: Content.content,\n            anonymous: checked\n        },{withCredentials: true}).then(() => \n        alert('POST COMPLETE') //material ui로 바꿀 수 있음... collapse를 사용??\n        )\n        document.location.href = \"/Jilli\"\n    }\n\n    // const getContent = () =>{\n    //     Axios.get('http://localhost:3002/api/freeboard').then((response)=>{\n    //         setViewContent(response.data);\n    //     })\n    // }\n\n    \n\n    const [viewContent, setViewContent] = useState([]);\n\n    const getValue = e => {\n        const {name, value} = e.target;\n        setContent({\n            ...Content, ////javascript ... 문법 이해 필요\n            [name]: value\n        })\n    };\n\n    const getContentValue = (e) => {\n        const data = e.target.value;\n        setContent({\n            ...Content,\n            content: data\n        })\n        console.log(Content);\n    }\n\n    useEffect(() => {\n        Axios.get('http://localhost:3002/api/freeboard').then((response)=>{\n            setViewContent(response.data);\n        })\n    },[viewContent]) // useEffect 인자로 state 보내주면 state 바뀔때마다 useEffect 실행....\n    \n    // const getData = ()=>{\n    //     fetch('http://localhost:3002/api')\n    //         .then((res) => res.json())\n    //         .then((res) => (res.greeting));\n    // };\n\n    // var apiResponse = {greeting: getData()}\n    \n    const [checked, setChecked] = useState(true);\n\n    const handleChange = (e) => {\n        setChecked(e.target.checked)\n    }\n\n    return(\n        <div className = \"FreeWritetotal\">\n        <><div class = \"FreeWritetitle-wrap\">\n            <h1>자유 게시판/글쓰기</h1>\n        </div>\n        <div className = \"FreeWritearticles-wrap\">\n            <form className=\"FreeWritewrite\">\n        \n            {/* <div className='movie-container'>\n                {viewContent.map(element => \n                    <div>\n                        <h2>{element.title}</h2>\n                        <div>\n                            {element.content}\n                        </div>\n                    </div>\n                )}\n            </div> */}\n        \n            <p>\n                <input className=\"title\" type='text' placeholder='제목' onChange = {getValue} name = 'title' />\n            </p>\n            <p>\n                <textarea  placeholder='내용' onChange = {getContentValue}></textarea>\n            </p>\n            <div className =\"FreeWriteclearBothOnly\"></div>\n            <FormControlLabel\n                className = \"anonym\"\n                label = \"익명\"\n                control = {<Checkbox\n                            color=\"primary\"\n                            checked = {checked}\n                            onChange = {handleChange}    \n                            />}\n                labelPlacement = \"start\"\n                \n            >\n            </FormControlLabel>\n            <IconButton \n                // className=\"submit-button\"\n                // onClick = {() => {\n                //     setViewContent(viewContent.concat({...Content}));\n                // }}\n                onClick = {submitContent}\n                variant=\"outlined\"\n                color=\"primary\"\n            ><Create></Create></IconButton>\n            <div className =\"FreeWriteclearBothOnly\"></div>\n            </form>\n        </div>\n    </>\n    </div>\n    );\n\n}\n\nexport default FreeWrite;","/home/ubuntu/MadCamp_Week4/madcamp_week4/src/Login.js",["122","123","124","125"],"import React from 'react';\nimport { Link, Route, BrowserRouter as Router} from 'react-router-dom';\nimport {useState, useEffect} from 'react';\nimport Axios from 'axios';\nimport './style/Login.css'\nimport Button from '@material-ui/core/Button'\nimport 'semantic-ui-css/semantic.min.css';\n\nfunction Login({setHasCookie}){\n    \n    const [ userId, setUserId ] = useState('');\n    const [ userPw, setUserPw ] = useState('');\n\n    const loginApi = (user) => {\n        return Axios.post('http://localhost:3002/api/users/login',\n            user, {withCredentials: true} ).then((response) => response.data);\n        \n    }\n\n    const handleSubmit = async(e) => {\n        e.preventDefault();\n\n        if(!userId || !userPw){\n            return;\n        }\n\n        try{\n            const response = await loginApi({\n                user_id: userId,\n                user_pw: userPw\n            });\n\n            if(response.result == 'ok'){\n                //\n                setHasCookie(true)\n                document.location.href = \"/\"\n                console.log(response.token)\n            } else {\n                throw new Error(response.error);\n            }\n        }catch(err){\n            alert('로그인 실패');\n            setUserId('');\n            setUserPw('');\n            console.error('login error', err);\n        }\n\n    }\n\n    return(\n        <div class = \"container\">\n        <form onSubmit = {handleSubmit}>\n            <p class = \"input\">\n                <input\n                    class = \"text\"\n                    type=\"text\"\n                    placeholder=\"아이디\"\n                    value = {userId} // 적혀있는 값을 변경....\n                    onChange = {e => setUserId(e.target.value)}\n                />\n            </p>\n            <p class = \"input\">\n                <input\n                    class = \"text\"\n                    type=\"password\"\n                    placeholder=\"비밀번호\"\n                    value = {userPw} // 적혀있는 값을 변경....\n                    onChange = {e => setUserPw(e.target.value)}\n                />\n            </p>\n            <Button \n                type = \"submit\"\n                // class = \"submitbutton\"\n                variant=\"outlined\"\n                color=\"primary\"\n                style = {{width : \"100%\", fontSize: \"16px\"}}\n                \n            >로그인</Button>\n            <p class = \"register\">\n                <Link to=\"/Join\">\n                회원가입\n                </Link>\n            </p>\n            </form>\n        </div>   \n    \n    )\n}\n\nexport default Login;","/home/ubuntu/MadCamp_Week4/madcamp_week4/src/JilliBoard.js",["126","127","128","129","130","131","132","133","134","135","136"],{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","severity":1,"message":"142","line":3,"column":16,"nodeType":"143","messageId":"144","endLine":3,"endColumn":21},{"ruleId":"141","severity":1,"message":"145","line":3,"column":40,"nodeType":"143","messageId":"144","endLine":3,"endColumn":46},{"ruleId":"141","severity":1,"message":"146","line":26,"column":16,"nodeType":"143","messageId":"144","endLine":26,"endColumn":17},{"ruleId":"141","severity":1,"message":"146","line":35,"column":16,"nodeType":"143","messageId":"144","endLine":35,"endColumn":17},{"ruleId":"141","severity":1,"message":"146","line":44,"column":16,"nodeType":"143","messageId":"144","endLine":44,"endColumn":17},{"ruleId":"147","severity":1,"message":"148","line":72,"column":45,"nodeType":"149","messageId":"150","endLine":72,"endColumn":47},{"ruleId":"147","severity":1,"message":"148","line":73,"column":47,"nodeType":"149","messageId":"150","endLine":73,"endColumn":49},{"ruleId":"147","severity":1,"message":"148","line":74,"column":45,"nodeType":"149","messageId":"150","endLine":74,"endColumn":47},{"ruleId":"141","severity":1,"message":"151","line":2,"column":9,"nodeType":"143","messageId":"144","endLine":2,"endColumn":18},{"ruleId":"141","severity":1,"message":"152","line":6,"column":8,"nodeType":"143","messageId":"144","endLine":6,"endColumn":13},{"ruleId":"141","severity":1,"message":"153","line":7,"column":10,"nodeType":"143","messageId":"144","endLine":7,"endColumn":20},{"ruleId":"141","severity":1,"message":"142","line":8,"column":25,"nodeType":"143","messageId":"144","endLine":8,"endColumn":30},{"ruleId":"141","severity":1,"message":"145","line":8,"column":49,"nodeType":"143","messageId":"144","endLine":8,"endColumn":55},{"ruleId":"141","severity":1,"message":"154","line":22,"column":11,"nodeType":"143","messageId":"144","endLine":22,"endColumn":24},{"ruleId":"141","severity":1,"message":"155","line":41,"column":11,"nodeType":"143","messageId":"144","endLine":41,"endColumn":19},{"ruleId":"141","severity":1,"message":"156","line":49,"column":11,"nodeType":"143","messageId":"144","endLine":49,"endColumn":26},{"ruleId":"141","severity":1,"message":"151","line":2,"column":9,"nodeType":"143","messageId":"144","endLine":2,"endColumn":18},{"ruleId":"141","severity":1,"message":"152","line":5,"column":8,"nodeType":"143","messageId":"144","endLine":5,"endColumn":13},{"ruleId":"141","severity":1,"message":"153","line":6,"column":10,"nodeType":"143","messageId":"144","endLine":6,"endColumn":20},{"ruleId":"141","severity":1,"message":"157","line":7,"column":10,"nodeType":"143","messageId":"144","endLine":7,"endColumn":14},{"ruleId":"141","severity":1,"message":"142","line":7,"column":16,"nodeType":"143","messageId":"144","endLine":7,"endColumn":21},{"ruleId":"141","severity":1,"message":"145","line":7,"column":40,"nodeType":"143","messageId":"144","endLine":7,"endColumn":46},{"ruleId":"158","severity":1,"message":"159","line":43,"column":16,"nodeType":"160","endLine":53,"endColumn":6},{"ruleId":"147","severity":1,"message":"148","line":58,"column":35,"nodeType":"149","messageId":"150","endLine":58,"endColumn":37},{"ruleId":"158","severity":1,"message":"159","line":104,"column":16,"nodeType":"160","endLine":119,"endColumn":6},{"ruleId":"158","severity":1,"message":"161","line":119,"column":7,"nodeType":"162","endLine":119,"endColumn":20,"suggestions":"163"},{"ruleId":"141","severity":1,"message":"142","line":3,"column":16,"nodeType":"143","messageId":"144","endLine":3,"endColumn":21},{"ruleId":"141","severity":1,"message":"145","line":3,"column":40,"nodeType":"143","messageId":"144","endLine":3,"endColumn":46},{"ruleId":"158","severity":1,"message":"164","line":14,"column":10,"nodeType":"162","endLine":14,"endColumn":27,"suggestions":"165"},{"ruleId":"141","severity":1,"message":"142","line":2,"column":16,"nodeType":"143","messageId":"144","endLine":2,"endColumn":21},{"ruleId":"141","severity":1,"message":"145","line":2,"column":40,"nodeType":"143","messageId":"144","endLine":2,"endColumn":46},{"ruleId":"141","severity":1,"message":"166","line":3,"column":19,"nodeType":"143","messageId":"144","endLine":3,"endColumn":28},{"ruleId":"158","severity":1,"message":"167","line":21,"column":8,"nodeType":"162","endLine":21,"endColumn":21,"suggestions":"168"},{"ruleId":"158","severity":1,"message":"167","line":27,"column":8,"nodeType":"162","endLine":27,"endColumn":10,"suggestions":"169"},{"ruleId":"141","severity":1,"message":"146","line":30,"column":16,"nodeType":"143","messageId":"144","endLine":30,"endColumn":17},{"ruleId":"141","severity":1,"message":"157","line":15,"column":10,"nodeType":"143","messageId":"144","endLine":15,"endColumn":14},{"ruleId":"170","severity":1,"message":"171","line":31,"column":38,"nodeType":"172","endLine":31,"endColumn":50},{"ruleId":"141","severity":1,"message":"166","line":1,"column":16,"nodeType":"143","messageId":"144","endLine":1,"endColumn":25},{"ruleId":"141","severity":1,"message":"142","line":3,"column":25,"nodeType":"143","messageId":"144","endLine":3,"endColumn":30},{"ruleId":"141","severity":1,"message":"145","line":3,"column":49,"nodeType":"143","messageId":"144","endLine":3,"endColumn":55},{"ruleId":"141","severity":1,"message":"173","line":4,"column":8,"nodeType":"143","messageId":"144","endLine":4,"endColumn":13},{"ruleId":"141","severity":1,"message":"174","line":5,"column":8,"nodeType":"143","messageId":"144","endLine":5,"endColumn":18},{"ruleId":"141","severity":1,"message":"175","line":32,"column":12,"nodeType":"143","messageId":"144","endLine":32,"endColumn":20},{"ruleId":"141","severity":1,"message":"176","line":32,"column":22,"nodeType":"143","messageId":"144","endLine":32,"endColumn":33},{"ruleId":"177","severity":1,"message":"178","line":177,"column":58,"nodeType":"149","messageId":"179","endLine":177,"endColumn":59},{"ruleId":"177","severity":1,"message":"178","line":178,"column":58,"nodeType":"149","messageId":"179","endLine":178,"endColumn":59},{"ruleId":"177","severity":1,"message":"178","line":179,"column":58,"nodeType":"149","messageId":"179","endLine":179,"endColumn":59},{"ruleId":"177","severity":1,"message":"178","line":180,"column":58,"nodeType":"149","messageId":"179","endLine":180,"endColumn":59},{"ruleId":"141","severity":1,"message":"151","line":2,"column":9,"nodeType":"143","messageId":"144","endLine":2,"endColumn":18},{"ruleId":"141","severity":1,"message":"152","line":6,"column":8,"nodeType":"143","messageId":"144","endLine":6,"endColumn":13},{"ruleId":"141","severity":1,"message":"153","line":7,"column":10,"nodeType":"143","messageId":"144","endLine":7,"endColumn":20},{"ruleId":"141","severity":1,"message":"180","line":9,"column":10,"nodeType":"143","messageId":"144","endLine":9,"endColumn":16},{"ruleId":"141","severity":1,"message":"142","line":2,"column":16,"nodeType":"143","messageId":"144","endLine":2,"endColumn":21},{"ruleId":"141","severity":1,"message":"145","line":2,"column":40,"nodeType":"143","messageId":"144","endLine":2,"endColumn":46},{"ruleId":"141","severity":1,"message":"166","line":3,"column":19,"nodeType":"143","messageId":"144","endLine":3,"endColumn":28},{"ruleId":"147","severity":1,"message":"148","line":33,"column":32,"nodeType":"149","messageId":"150","endLine":33,"endColumn":34},{"ruleId":"141","severity":1,"message":"157","line":3,"column":21,"nodeType":"143","messageId":"144","endLine":3,"endColumn":25},{"ruleId":"158","severity":1,"message":"181","line":33,"column":8,"nodeType":"162","endLine":33,"endColumn":22,"suggestions":"182"},{"ruleId":"158","severity":1,"message":"183","line":38,"column":8,"nodeType":"143","endLine":38,"endColumn":15},{"ruleId":"147","severity":1,"message":"148","line":41,"column":29,"nodeType":"149","messageId":"150","endLine":41,"endColumn":31},{"ruleId":"147","severity":1,"message":"148","line":51,"column":37,"nodeType":"149","messageId":"150","endLine":51,"endColumn":39},{"ruleId":"147","severity":1,"message":"148","line":63,"column":29,"nodeType":"149","messageId":"150","endLine":63,"endColumn":31},{"ruleId":"147","severity":1,"message":"148","line":65,"column":45,"nodeType":"149","messageId":"150","endLine":65,"endColumn":47},{"ruleId":"147","severity":1,"message":"148","line":79,"column":29,"nodeType":"149","messageId":"150","endLine":79,"endColumn":31},{"ruleId":"184","severity":1,"message":"185","line":104,"column":34,"nodeType":"160","messageId":"186","endLine":104,"endColumn":36},{"ruleId":"147","severity":1,"message":"187","line":123,"column":38,"nodeType":"149","messageId":"150","endLine":123,"endColumn":40},{"ruleId":"141","severity":1,"message":"146","line":147,"column":36,"nodeType":"143","messageId":"144","endLine":147,"endColumn":37},"no-native-reassign",["188"],"no-negated-in-lhs",["189"],"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'Router' is defined but never used.","'_' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Component' is defined but never used.","'Alert' is defined but never used.","'AlertTitle' is defined but never used.","'submitContent' is assigned a value but never used.","'getValue' is assigned a value but never used.","'getContentValue' is assigned a value but never used.","'Link' is defined but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["190"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["191"],"'useEffect' is defined but never used.","React Hook useEffect has a missing dependency: 'body.id'. Either include it or remove the dependency array.",["192"],["193"],"react/jsx-pascal-case","Imported JSX component Co_buying must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","'Axios' is defined but never used.","'JilliBoard' is defined but never used.","'clkColor' is assigned a value but never used.","'setClkColor' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'Button' is defined but never used.","React Hook useEffect has a missing dependency: 'roomNum'. Either include it or remove the dependency array.",["194"],"React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation",{"desc":"195","fix":"196"},{"desc":"197","fix":"198"},{"desc":"199","fix":"200"},{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},"Update the dependencies array to be: [id, viewComment]",{"range":"205","text":"206"},"Update the dependencies array to be: [props, props.cookies]",{"range":"207","text":"208"},"Update the dependencies array to be: [body.id, viewContent]",{"range":"209","text":"210"},"Update the dependencies array to be: [body.id]",{"range":"211","text":"212"},"Update the dependencies array to be: [replyContent, roomNum]",{"range":"213","text":"214"},[3467,3480],"[id, viewComment]",[468,485],"[props, props.cookies]",[551,564],"[body.id, viewContent]",[752,754],"[body.id]",[958,972],"[replyContent, roomNum]"]